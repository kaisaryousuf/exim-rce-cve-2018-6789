import re

import gdb


def main():
    gdb.execute("set logging off")
    for f in ["store_extend_3", "store_get_3", "store_release_3", "store_reset_3"]:
        gdb.execute("b store.c:{}".format(f))
    gdb.execute("continue")

    """
    #define store_extend(addr,old,new) store_extend_3(addr, old, new, __FILE__, __LINE__)
    #define store_free(addr)     store_free_3(addr, __FILE__, __LINE__)
    #define store_get(size)      store_get_3(size, __FILE__, __LINE__)
    #define store_get_perm(size) store_get_perm_3(size, __FILE__, __LINE__)
    #define store_malloc(size)   store_malloc_3(size, __FILE__, __LINE__)
    #define store_release(addr)  store_release_3(addr, __FILE__, __LINE__)
    #define store_reset(addr)    store_reset_3(addr, __FILE__, __LINE__)

    extern BOOL    store_extend_3(void *, int, int, const char *, int);  /* The */
    extern void    store_free_3(void *, const char *, int);     /* value of the */
    extern void   *store_get_3(int, const char *, int);         /* 2nd arg is   */
    extern void   *store_get_perm_3(int, const char *, int);    /* __FILE__ in  */
    extern void   *store_malloc_3(int, const char *, int);      /* every call,  */
    extern void    store_release_3(void *, const char *, int);  /* so give its  */
    extern void    store_reset_3(void *, const char *, int);    /* correct type */

    """

    functions_void_return_addr = ["store_release_3", "store_reset_3", "store_extend_3"]

    functions_void_ptr_return_size = ["store_get_3"]

    with open("/transfer/trace.log", "w") as trace_file:
        while True:
            try:
                current_stack_frame = gdb.newest_frame()
            except gdb.error:
                break

            function_name = str(current_stack_frame.function())

            if function_name == "store_extend_3":
                file_name_reg = "$rcx"
                linu_number_reg = "$r8"
            else:
                file_name_reg = "$rsi"
                linu_number_reg = "$rdx"

            file_name = gdb.execute('printf "%s", {}'.format(file_name_reg), to_string=True)
            line_number = int(gdb.parse_and_eval(linu_number_reg))

            if function_name in functions_void_return_addr:
                rdi = int(gdb.parse_and_eval("$rdi"))
                if function_name == "store_extend_3":
                    gdb.execute("finish")
                    rax = bool(int(gdb.parse_and_eval("$rax")))

            elif function_name in functions_void_ptr_return_size:
                rdi = int(gdb.parse_and_eval("$rdi"))
                gdb.execute("finish")
                rax = "0x{:x}".format(int(gdb.parse_and_eval("$rax")))

            else:
                raise RuntimeError(
                    'missconfiguration in function list: missing entry for function "{}"'.format(function_name)
                )

            trace_file.write(
                "{}:{}: {}(0x{:x}, ...) = {}\n".format(
                    file_name, line_number, function_name, rdi, rax
                )
            )

            listing = gdb.execute("list {}:{}".format(file_name, line_number), to_string=True)
            trace_file.write("{}\n".format(listing))

            gdb.execute("continue")


main()
